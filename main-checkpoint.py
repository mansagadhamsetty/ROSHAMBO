{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f0e36b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from PIL import Image, ImageTk\n",
    "from random import randint\n",
    "\n",
    "# main window\n",
    "root = Tk()\n",
    "root.title(\"Rock Scissor Paper\")\n",
    "root.configure(background=\"#9b59b6\")\n",
    "\n",
    "# picture\n",
    "rock_img = ImageTk.PhotoImage(Image.open(\"rock-user.png\"))\n",
    "paper_img = ImageTk.PhotoImage(Image.open(\"paper-user.png\"))\n",
    "scissor_img = ImageTk.PhotoImage(Image.open(\"scissors-user.png\"))\n",
    "rock_img_comp = ImageTk.PhotoImage(Image.open(\"rock.png\"))\n",
    "paper_img_comp = ImageTk.PhotoImage(Image.open(\"paper.png\"))\n",
    "scissor_img_comp = ImageTk.PhotoImage(Image.open(\"scissors.png\"))\n",
    "\n",
    "# insert picture\n",
    "user_label = Label(root, image=scissor_img, bg=\"#9b59b6\")\n",
    "comp_label = Label(root, image=scissor_img_comp, bg=\"#9b59b6\")\n",
    "comp_label.grid(row=1, column=0)\n",
    "user_label.grid(row=1, column=4)\n",
    "\n",
    "\n",
    "# scores\n",
    "playerScore = Label(root, text=0, font=100, bg=\"#9b59b6\", fg=\"white\")\n",
    "computerScore = Label(root, text=0, font=100, bg=\"#9b59b6\", fg=\"white\")\n",
    "computerScore.grid(row=1, column=1)\n",
    "playerScore.grid(row=1, column=3)\n",
    "\n",
    "# indicators\n",
    "user_indicator = Label(root, font=50, text=\"USER\", bg=\"#9b59b6\", fg=\"white\")\n",
    "comp_indicator = Label(root, font=50, text=\"COMPUTER\",\n",
    "                       bg=\"#9b59b6\", fg=\"white\")\n",
    "user_indicator.grid(row=0, column=3)\n",
    "comp_indicator.grid(row=0, column=1)\n",
    "\n",
    "# messages\n",
    "msg = Label(root, font=50, bg=\"#9b59b6\", fg=\"white\")\n",
    "msg.grid(row=3, column=2)\n",
    "\n",
    "# update message\n",
    "\n",
    "\n",
    "def updateMessage(x):\n",
    "    msg['text'] = x\n",
    "\n",
    "# update user score\n",
    "\n",
    "\n",
    "def updateUserScore():\n",
    "    score = int(playerScore[\"text\"])\n",
    "    score += 1\n",
    "    playerScore[\"text\"] = str(score)\n",
    "\n",
    "# update computer score\n",
    "\n",
    "\n",
    "def updateCompScore():\n",
    "    score = int(computerScore[\"text\"])\n",
    "    score += 1\n",
    "    computerScore[\"text\"] = str(score)\n",
    "\n",
    "# check winner\n",
    "\n",
    "\n",
    "def checkWin(player, computer):\n",
    "    if player == computer:\n",
    "        updateMessage(\"Its a tie!!!\")\n",
    "    elif player == \"rock\":\n",
    "        if computer == \"paper\":\n",
    "            updateMessage(\"You loose\")\n",
    "            updateCompScore()\n",
    "        else:\n",
    "            updateMessage(\"You Win\")\n",
    "            updateUserScore()\n",
    "    elif player == \"paper\":\n",
    "        if computer == \"scissor\":\n",
    "            updateMessage(\"You loose\")\n",
    "            updateCompScore()\n",
    "        else:\n",
    "            updateMessage(\"You Win\")\n",
    "            updateUserScore()\n",
    "    elif player == \"scissor\":\n",
    "        if computer == \"rock\":\n",
    "            updateMessage(\"You loose\")\n",
    "            updateCompScore()\n",
    "        else:\n",
    "            updateMessage(\"You Win\")\n",
    "            updateUserScore()\n",
    "\n",
    "    else:\n",
    "        pass\n",
    "\n",
    "\n",
    "# update choices\n",
    "\n",
    "choices = [\"rock\", \"paper\", \"scissor\"]\n",
    "\n",
    "\n",
    "def updateChoice(x):\n",
    "\n",
    "    # for computer\n",
    "    compChoice = choices[randint(0, 2)]\n",
    "    if compChoice == \"rock\":\n",
    "        comp_label.configure(image=rock_img_comp)\n",
    "    elif compChoice == \"paper\":\n",
    "        comp_label.configure(image=paper_img_comp)\n",
    "    else:\n",
    "        comp_label.configure(image=scissor_img_comp)\n",
    "\n",
    "\n",
    "# for user\n",
    "    if x == \"rock\":\n",
    "        user_label.configure(image=rock_img)\n",
    "    elif x == \"paper\":\n",
    "        user_label.configure(image=paper_img)\n",
    "    else:\n",
    "        user_label.configure(image=scissor_img)\n",
    "\n",
    "    checkWin(x, compChoice)\n",
    "\n",
    "\n",
    "# buttons\n",
    "rock = Button(root, width=20, height=2, text=\"ROCK\",\n",
    "              bg=\"#FF3E4D\", fg=\"white\", command=lambda: updateChoice(\"rock\")).grid(row=2, column=1)\n",
    "paper = Button(root, width=20, height=2, text=\"PAPER\",\n",
    "               bg=\"#FAD02E\", fg=\"white\", command=lambda: updateChoice(\"paper\")).grid(row=2, column=2)\n",
    "scissor = Button(root, width=20, height=2, text=\"SCISSOR\",\n",
    "                 bg=\"#0ABDE3\", fg=\"white\", command=lambda: updateChoice(\"scissor\")).grid(row=2, column=3)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98b989f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
